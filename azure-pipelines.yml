name: 1.$(Year:yy).$(DayOfYear)$(Rev:.rr)
pool:
  name: Hosted Windows 2019 with VS2019

variables: 
  PACKAGE_PROJECTS: 'src/**/*.csproj'
  TEST_PROJECTS: '**/*.Tests.csproj'
  TEMPLATE_PROJECTS: 'templates/**/*.csproj'

jobs:
- job: Database
  displayName: Database build and deploy
  pool:
    vmImage: 'windows-latest'

  steps:
  - task: VSBuild@1
    displayName: 'Build soultion NRSRx.DB.sln'
    inputs:
      solution: NRSRx.DB.sln

  - task: PowerShell@2
    displayName: 'Artifact SQL Dacpacs'
    inputs:
      targetType: filePath
      filePath: 'samples/IkeMtz.Samples.Db/artifact-dacpacs.ps1'
      arguments: '-artifactFolder $(build.artifactstagingdirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: dacpac_drop'
    inputs:
      ArtifactName: 'dacpac_drop'
  
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk 3.1.x'
    inputs:
      version: 3.1.x
 
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: 'build'
      projects: 'src/**/*.csproj'
      arguments: '--configuration Debug --output $(build.artifactstagingdirectory)'
  
- job: APIs
  displayName: Build and test API code
  pool:
    vmImage: 'windows-latest'

  steps:
  - checkout: self
    persistCredentials: true
  
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk 3.1.x'
    inputs:
      version: 3.1.x
  
  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: '$(PACKAGE_PROJECTS)'
  
  - task: bleddynrichards.Assembly-Info-Task.Assembly-Info-NetCore.Assembly-Info-NetCore@2
    displayName: 'Set Assembly Manifest Data'
    inputs:  
      InsertAttributes: true
      VersionNumber: '$(Build.BuildNumber)'
      FileVersionNumber: '$(Build.BuildNumber)'
      InformationalVersion: '$(Build.BuildNumber)'
      PackageVersion: '$(Build.BuildNumber)'

      - task: SonarQubePrepare@4
        inputs:
          SonarQube: 'SonarQube'
          scannerMode: 'MSBuild'
          projectKey: 'tsp.yogesh'
          projectName: 'tsp.yogesh'
  
  - task: SonarQubePrepare@4
    displayName: 'Prepare analysis on SonarCloud'
    inputs:
      SonarQube: 'SonarQube'
      scannerMode: 'MSBuild'
      projectKey: 'tsp.yogesh'
      projectName: 'tsp.yogesh'
      extraProperties: |
        # Additional properties that will be passed to the scanner,
        # Put one key=value per line, example:
        # sonar.cs.vstest.reportsPaths=$(Agent.WorkFolder)/_temp/*.trx
        # sonar.branch.name=$(System.PullRequest.SourceBranch)
        # sonar.branch.target=$(System.PullRequest.TargetBranch)
        sonar.exclusions=templates/**
        sonar.coverage.exclusions=templates/**
  
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      projects: 'src/**/*.csproj'
      arguments: '--configuration Debug --no-restore'
  
  - task: DotNetCoreCLI@2
    displayName: 'Tests'
    inputs:
      command: test
      projects: '$(TEST_PROJECTS)'
      arguments: '--configuration $(BuildConfiguration) --collect "Code coverage" --settings $(Build.SourcesDirectory)/test.RunSettings --filter TestCategory!=Integration'
  
  - task: DotNetCoreCLI@2
    displayName: 'Test - Sonar'
    inputs:
      command: custom
      projects: '$(TEST_PROJECTS)'
      custom: 'test'
      arguments: '--logger trx --configuration $(BuildConfiguration) --collect "Code coverage" --no-build --no-restore --results-directory $(Common.TestResultsDirectory) --no-build --no-restore --settings $(Build.SourcesDirectory)/test.RunSettings --filter TestCategory!=Integration'
        
  - task: SonarQubePrepare@4
    displayName: 'Run Code Analysis'
  
  - task: SonarQubePrepare@4
    displayName: 'Publish Quality Gate Result'
 
  
  - task: DotNetCoreCLI@2
    displayName: Pack Symbols
    inputs:
      command: 'pack'
      packagesToPack: '$(PACKAGE_PROJECTS)'
      configuration: 'Debug'
      nobuild: true
      includesymbols: true
      includesource: true
      versioningScheme: byBuildNumber
      buildProperties: 'version-suffix=symbols'
      verbosityPack: 'Minimal'
  
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      ArtifactName: 'symbol_drop'
  
  - task: GitTag@5
    inputs:
      workingdir: '$(SYSTEM.DEFAULTWORKINGDIRECTORY)'
      tagUser: 'ikemtz'
      tagEmail: 'ikemtz@outlook.com'
      tag: 'nrsrx-$(build.buildNumber)'
      tagMessage: 'nrsrx-$(build.buildNumber)'
      useLightweightTags: true
      conditions: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
trigger:
  batch: true
  branches:
    include:
      - master
pr:
  branches:
    include:
      - master
